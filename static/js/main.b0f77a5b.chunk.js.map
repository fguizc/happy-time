{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Countdown","confirm","TODAY","Day","_DATE","day","DEFAULT_DEAD_LINE","startOf","set","valueOf","isFriday","newDeadLine","React","memo","useState","dealLine","setdealLine","userName","setuserName","modalVisible","setModalVisible","useEffect","_userName","localStorage","getItem","onTimeChange","value","hour","min","minute","result","disabledSeconds","_seconds","i","push","className","title","maskClosable","closable","mask","visible","cancelButtonProps","disabled","onOk","setItem","error","onChange","e","target","placeholder","maxLength","active","SettingOutlined","style","fontSize","color","position","right","top","onClick","content","htmlFor","icon","okText","cancelText","setTimeout","format","onFinish","success","textAlign","fontWeight","aria-label","aria-labelledby","role","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"mdAeQA,E,IAAAA,UACAC,E,IAAAA,QAEFC,EAAQC,MACRC,EAAQF,EAAMG,MACdC,EAAoBJ,EAAMK,QAAQ,OAAOC,IAAI,OAAQ,IAAIC,UAGzDC,EAAqB,IAAVN,EAEbO,EAAc,EA0KHC,UAAMC,MAxKrB,WAAgB,IAAD,EACmBC,mBAASR,GAD5B,mBACNS,EADM,KACIC,EADJ,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAG2BJ,oBAAS,GAHpC,mBAGNK,EAHM,KAGQC,EAHR,KAKbC,qBAAU,WACR,IAAMC,EAAYC,aAAaC,QAXP,iBAYpBF,EACFJ,EAAYI,GAEZF,GAAgB,KAEjB,CAACH,IAEJ,IAIMQ,EAAe,SAACC,GACpB,IAAMC,EAAOD,EAAMC,OACbC,EAAMF,EAAMG,UAAY,EACxBC,EAAS5B,EAAMK,QAAQ,OAC1BC,IAAI,OAAQmB,GACZnB,IAAI,SAAUoB,GACdnB,UACHE,EAAcmB,GA+BVC,EAAkB,WAEtB,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAI,GAAIA,IACZ,IAANA,GACFD,EAASE,KAAKD,GAGlB,OAAOD,GAgBT,OACE,yBAAKG,UAAU,OACb,uBACEC,MAAM,eACNC,cAAc,EACdC,UAAU,EACVC,MAAI,EACJC,QAASrB,EACTsB,kBAAmB,CACjBC,UAAU,GAEZC,KApBe,WACf1B,GACFM,aAAaqB,QA7ES,gBA6EoB3B,GAC1CG,GAAgB,IAEhB,IAAQyB,MAAM,4DAMd,mDAYE,uBACEC,SA5BiB,SAACC,GACxB7B,EAAY6B,EAAEC,OAAOtB,QA4BfA,MAAOT,EACPgC,YAAY,yDACZC,UAAW,MAGd/B,EACC,oCAEE,uBAAUgC,QAAM,IAChB,4BACA,uBAAUA,QAAM,KAGlB,oCACE,wBAAIhB,UAAU,YAAd,OAA8BlB,GAC9B,yBAAKkB,UAAU,QAEb,wBAAIA,UAAU,cAAd,6CAEE,kBAACiB,EAAA,EAAD,CACEC,MAAO,CACLC,SAAU,OACVC,MAAO,UACPC,SAAU,WACVC,MAAO,OACPC,IAAK,QAEPC,QA9FY,WACxB1D,EAAQ,CACN2D,QACE,6BACE,2BAAOC,QAAQ,IAAf,oDACA,6BACA,uBACEf,SAAUrB,EACVM,gBAAiBA,IAEnB,8BAMJ+B,KAAM,KACNC,OAAQ,eACRC,WAAY,eACZrB,KAlBM,WAmBJsB,YAAW,WACT1C,aAAaqB,QAvDK,gBAuDwBjC,GAC1CK,EAAYL,KACX,UA0EC,kBAACX,EAAD,CACE0B,MAAOX,EACPmD,OAAO,eACPC,SAlHK,WACf,IAAQC,QAAR,gFAoHM,yBAAKjC,UAAU,QACb,wBAAIA,UAAU,cAAd,8CACCzB,EACC,yBACE2C,MAAO,CACLgB,UAAW,SACXf,SAAU,OACVgB,WAAY,WAJhB,WAUA,yBAAKjB,MAAO,CAAEC,SAAU,SACtB,0BACEiB,aAAW,aACXC,kBAAgB,aAChBC,KAAK,OAHP,4BAOA,oEACS,IACP,0BAAMpB,MAAO,CAAEiB,WAAY,QACxBlE,GAAS,GAAKA,GAAS,EAAI,EAAIA,EAAQ,GAClC,IAJV,iBCvKIsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,c","file":"static/js/main.b0f77a5b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  message,\n  Statistic,\n  TimePicker,\n  Modal,\n  Input,\n  Skeleton,\n  Divider,\n} from \"antd\";\nimport Day from \"dayjs\";\n\nimport { SettingOutlined } from \"@ant-design/icons\";\n\nconst { Countdown } = Statistic;\nconst { confirm } = Modal;\n\nconst TODAY = Day();\nconst _DATE = TODAY.day();\nconst DEFAULT_DEAD_LINE = TODAY.startOf(\"day\").set(\"hour\", 18).valueOf();\nconst LOCAL_DEAD_LINE_KEY = \"localDealLine\";\nconst LOCAL_USER_NAME_KEY = \"localUserName\";\nconst isFriday = _DATE === 5;\n\nlet newDeadLine = 0;\n\nfunction App() {\n  const [dealLine, setdealLine] = useState(DEFAULT_DEAD_LINE);\n  const [userName, setuserName] = useState(\"\");\n  const [modalVisible, setModalVisible] = useState(false);\n\n  useEffect(() => {\n    const _userName = localStorage.getItem(LOCAL_USER_NAME_KEY);\n    if (_userName) {\n      setuserName(_userName);\n    } else {\n      setModalVisible(true);\n    }\n  }, [userName]);\n\n  const onFinish = () => {\n    message.success(`下班啦！又是一天美好时间`);\n  };\n\n  const onTimeChange = (value) => {\n    const hour = value.hour();\n    const min = value.minute() || 0;\n    const result = TODAY.startOf(\"day\")\n      .set(\"hour\", hour)\n      .set(\"minute\", min)\n      .valueOf();\n    newDeadLine = result;\n  };\n\n  const onOpenTimeSetting = () => {\n    confirm({\n      content: (\n        <div>\n          <label htmlFor=\"\">请选择下班时间：</label>\n          <br />\n          <TimePicker\n            onChange={onTimeChange}\n            disabledSeconds={disabledSeconds}\n          />\n          <br />\n          {/* <label htmlFor=\"\">是否记住下班时间：</label>\n          <br />\n          <Switch onChange={onSwitchChange} /> */}\n        </div>\n      ),\n      icon: null,\n      okText: \"确定\",\n      cancelText: \"取消\",\n      onOk() {\n        setTimeout(() => {\n          localStorage.setItem(LOCAL_DEAD_LINE_KEY, newDeadLine);\n          setdealLine(newDeadLine);\n        }, 0);\n      },\n    });\n  };\n\n  const disabledSeconds = () => {\n    const _seconds = [];\n    for (let i = 0; i < 60; i++) {\n      if (i !== 0) {\n        _seconds.push(i);\n      }\n    }\n    return _seconds;\n  };\n\n  const onUserNameChange = (e) => {\n    setuserName(e.target.value);\n  };\n\n  const onCheckValid = () => {\n    if (userName) {\n      localStorage.setItem(LOCAL_USER_NAME_KEY, userName);\n      setModalVisible(false);\n    } else {\n      message.error(\"不允许昵称填写为空\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Modal\n        title=\"Preparing...\"\n        maskClosable={false}\n        closable={false}\n        mask\n        visible={modalVisible}\n        cancelButtonProps={{\n          disabled: true,\n        }}\n        onOk={onCheckValid}\n      >\n        请填写您的昵称：\n        <Input\n          onChange={onUserNameChange}\n          value={userName}\n          placeholder=\"填写完成后不可更改\"\n          maxLength={10}\n        />\n      </Modal>\n      {modalVisible ? (\n        <>\n          {/* <Skeleton avatar shape=\"square\" /> */}\n          <Skeleton active />\n          <Divider />\n          <Skeleton active />\n        </>\n      ) : (\n        <>\n          <h2 className=\"username\">Hi, {userName}</h2>\n          <div className=\"card\">\n            {/* <EditTwoTone onClick={onRememberTime} className=\"edit-icon\" /> */}\n            <h2 className=\"card-title\">\n              距离下班时间：\n              <SettingOutlined\n                style={{\n                  fontSize: \"16px\",\n                  color: \"#fb8e4f\",\n                  position: \"absolute\",\n                  right: \"20px\",\n                  top: \"20px\",\n                }}\n                onClick={onOpenTimeSetting}\n              />\n            </h2>\n            <Countdown\n              value={dealLine}\n              format=\"HH:mm:ss:SSS\"\n              onFinish={onFinish}\n            />\n          </div>\n          <div className=\"card\">\n            <h2 className=\"card-title\">今天是周五吗？</h2>\n            {isFriday ? (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  fontSize: \"50px\",\n                  fontWeight: \"bolder\",\n                }}\n              >\n                是!\n              </div>\n            ) : (\n              <div style={{ fontSize: \"23px\" }}>\n                <span\n                  aria-label=\"not friday\"\n                  aria-labelledby=\"not friday\"\n                  role=\"img\"\n                >\n                  😢不是\n                </span>\n                <div>\n                  距离周五还有{\" \"}\n                  <span style={{ fontWeight: \"600\" }}>\n                    {_DATE >= 0 && _DATE <= 4 ? 5 - _DATE : 6}\n                  </span>{\" \"}\n                  天\n                </div>\n              </div>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}